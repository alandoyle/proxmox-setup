#!/bin/bash
#
# My Proxmox setup script
#
# Copyright (C) 2022-2023 Alan Doyle
#
# https://github.com/alandoyle/proxmox-setup/
#
# License: MIT
# Based in part on some scripts from https://github.com/tteck/Proxmox/
#
################################################################################
#
# Root check
#
if [ `id -u` -ne 0 ] ; then
    echo "ERROR: This script needs to be run as root or using sudo."
    exit 99
fi
#
################################################################################
#
# Include OS details
#
. /etc/os-release
PVEVERSION=`pveversion|cut -d/ -f2`
echo "Setting up Proxmox ${PVEVERSION}"
#
################################################################################
#
# Setup repositories
#
echo "Disabling Enterprise Repositories"
sed -i "s/^deb/#deb/g" /etc/apt/sources.list.d/pve-enterprise.list
if [ -f /etc/apt/sources.list.d/ceph.list ] ; then
	cat <<EOF >/etc/apt/sources.list.d/ceph.list
# deb http://download.proxmox.com/debian/ceph-quincy bookworm enterprise
deb http://download.proxmox.com/debian/ceph-quincy bookworm no-subscription
EOF
fi
#
################################################################################
#
echo "Setup PVE Sources"
NON_FREE_FIRMWARE=non-free-firmware
[ "${VERSION_CODENAME}" = "bullseye" ] && NON_FREE_FIRMWARE=
cat <<EOF >/etc/apt/sources.list
# Debian repositories
deb http://deb.debian.org/debian ${VERSION_CODENAME} main contrib ${NON_FREE_FIRMWARE}
deb http://deb.debian.org/debian ${VERSION_CODENAME}-updates main contrib ${NON_FREE_FIRMWARE}

# security updates
deb http://security.debian.org/debian-security ${VERSION_CODENAME}-security main contrib ${NON_FREE_FIRMWARE}

# Proxmox repositories
deb http://download.proxmox.com/debian/pve ${VERSION_CODENAME} pve-no-subscription
# deb http://download.proxmox.com/debian/pve ${VERSION_CODENAME} pvetest

EOF
#
################################################################################
#
echo "Upgrade Proxmox (please be patient)"
apt-get update &>/dev/null
apt-get -y dist-upgrade &>/dev/null
#
################################################################################
#
if [ ! -f /etc/apt/apt.conf.d/no-nag-script ] ; then
    echo "Disable Subscription Nag"
    echo "DPkg::Post-Invoke { \"dpkg -V proxmox-widget-toolkit | grep -q '/proxmoxlib\.js$'; if [ \$? -eq 1 ]; then { echo 'Removing subscription nag from UI...'; sed -i '/data.status/{s/\!//;s/active/NoMoreNagging/}' /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js; }; fi\"; };" >/etc/apt/apt.conf.d/no-nag-script

    apt-get --reinstall install proxmox-widget-toolkit &>/dev/null
fi
#
################################################################################
#
echo "Adding additional applications"
apt-get -y install vim aptitude lsscsi git curl gnupg p7zip p7zip-full unrar-free lm-sensors neofetch zip unzip &>/dev/null
CPU_VENDOR=`cat /proc/cpuinfo | grep vendor_id | uniq | awk -F: '{ print $2 }' | tr -d "[:blank:]"`
CPU_MICROCODE=
case $CPU_VENDOR in
    GenuineIntel)  CPU_MICROCODE=intel-microcode ;;
    AuthenticAMD)  CPU_MICROCODE=amd64-microcode ;;
esac
[ ! -z ${CPU_MICROCODE} ] && apt-get -y install ${CPU_MICROCODE} &>/dev/null
#
################################################################################
#
echo "Adding verion specific applications"
if [ "${VERSION_CODENAME}" != "bookworm" ] ; then
	echo "Installing Proxmox 7.x applications"
	if [ ! -f /usr/bin/btop ] ; then
		wget http://ftp.uk.debian.org/debian/pool/main/b/btop/btop_1.2.7-1~bpo11+1_amd64.deb &>/dev/null
		if [ -f btop_1.2.7-1~bpo11+1_amd64.deb ] ; then
			dpkg -i btop_1.2.7-1~bpo11+1_amd64.deb &>/dev/null
			rm btop_1.2.7-1~bpo11+1_amd64.deb &>/dev/null
		fi
	fi
	if [ ! -f /usr/sbin/hddtemp ] ; then
		apt-get -y install hddtemp &>/dev/null
	fi
else
	echo "Installing Proxmox 8.x applications"
	if [ ! -f /usr/bin/btop ] ; then
		apt-get -y install btop &>/dev/null
	fi
	if [ ! -f /usr/sbin/hddtemp ] ; then
		wget http://ftp.uk.debian.org/debian/pool/main/h/hddtemp/hddtemp_0.3-beta15-54_amd64.deb &>/dev/null
		if [ -f hddtemp_0.3-beta15-54_amd64.deb ] ; then
			dpkg -i hddtemp_0.3-beta15-54_amd64.deb &>/dev/null
			rm hddtemp_0.3-beta15-54_amd64.deb &>/dev/null
		fi
	fi
fi
#
chmod u+s /usr/sbin/hddtemp
#
################################################################################
#
echo "Configuring applications"
if [ !  -f /etc/vim/vimrc.local ] ; then
    cat <<EOF >/etc/vim/vimrc.local
if filereadable("\$VIMRUNTIME/defaults.vim")
  source \$VIMRUNTIME/defaults.vim
endif
" now set the line that the defaults file is not reloaded afterwards!
let skip_defaults_vim = 1
" turn off mouse
set mouse=
" other override settings go here
syntax on
EOF
fi
#
################################################################################
#
apt-mark hold firmware-linux-free &>/dev/null
if [ -d /usr/lib/firmware.prev ] ; then
    echo "Update firmware"
    cd /usr/lib/firmware
    git config pull.rebase false
    git pull &>/dev/null
else
    echo "Download firmware"
    mv /usr/lib/firmware /usr/lib/firmware.prev
    cd /usr/lib
    git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git firmware &>/dev/null
fi
#
################################################################################
#
if [ ! -f /etc/default/grub.d/iommu.cfg ] ; then
    echo "Enable IOMMU"
    IOMMU_CPU="amd_iommu=on"
    dmidecode -s processor-manufacturer | grep Intel &>/dev/null
    [ $? -eq 0 ] && IOMMU_CPU="intel_iommu=on"
    cat <<EOF >/etc/default/grub.d/iommu.cfg
# Enable IOMMU
GRUB_CMDLINE_LINUX_DEFAULT="${IOMMU_CPU} iommu=pt \${GRUB_CMDLINE_LINUX_DEFAULT}"
EOF
    cat <<EOF >>/etc/modules
vfio
vfio_iommu_type1
vfio_pci
vfio_virqfd
EOF
    update-initramfs -u -k all &>/dev/null
    update-grub2 &>/dev/null
fi
if [ ! -f /usr/local/bin/lsiommu ] ; then
    cat <<EOF >>/usr/local/bin/lsiommu
#!/bin/bash
for d in \$(find /sys/kernel/iommu_groups/ -type l | sort -n -k5 -t/); do
    n=\${d#*/iommu_groups/*}; n=\${n%%/*}
    printf '[Group %s] ' "\$n"
    lspci -nns "\${d##*/}"
done;
EOF
    chmod a+x /usr/local/bin/lsiommu
fi
#
################################################################################
#
grep bash.aliases /root/.bashrc &>/dev/null 2>&1
if [ $? -eq 0 ] ; then
    # Remove old modifications
    cat /root/.bashrc | grep -v 'bash\.aliases' > /root/.bashrc.$$
    mv /root/.bashrc.$$ /root/.bashrc
fi
echo "[ -f /etc/bash.aliases ] && . /etc/bash.aliases" > /etc/profile.d/aliases.sh
cat <<EOF >/etc/bash.aliases

alias dfspace="df -hT -x udev -x tmpfs -x cgmfs -x snap -x devtmpfs -x fuse"
alias pg="less"
alias cls="clear"

# Change directory aliases
alias home='cd ~'
alias cd..='cd ..'

# cd into the old directory
alias bd='cd "$OLDPWD"'

# Remove a directory and all files
alias rmd='/bin/rm  --recursive --force --verbose '

# Alias's for multiple directory listing commands
alias la='ls -Alh' # show hidden files
alias lf='ls -aFh --color=always' # add colors and file type extensions
alias lx='ls -lXBh' # sort by extension
alias lk='ls -lSrh' # sort by size
alias lc='ls -lcrh' # sort by change time
alias lu='ls -lurh' # sort by access time
alias lr='ls -lRh' # recursive ls
alias lt='ls -ltrh' # sort by date
alias lm='ls -alh |more' # pipe through 'more'
alias lw='ls -xAh' # wide listing format
alias ll='ls -Fls' # long listing format
alias labc='ls -lap' #alphabetical sort
alias lf="ls -l | egrep -v '^d'" # files only
alias ldir="ls -l | egrep '^d'" # directories only

# Search command line history
alias h="history | grep "

# Alias's for archives
alias mktar='tar -cvf'
alias mkbz2='tar -cvjf'
alias mkgz='tar -cvzf'
alias untar='tar -xvf'
alias unbz2='tar -xvjf'
alias ungz='tar -xvzf'


# Extracts any archive(s) (if unp isn't installed)
extract () {
	for archive in "\$@"; do
		if [ -f "\$archive" ] ; then
			case \$archive in
				*.tar.bz2)   tar xvjf \$archive    ;;
				*.tar.gz)    tar xvzf \$archive    ;;
				*.bz2)       bunzip2 \$archive     ;;
				*.rar)       unrar -x \$archive    ;;
				*.gz)        gunzip \$archive      ;;
				*.tar)       tar xvf \$archive     ;;
				*.tbz2)      tar xvjf \$archive    ;;
				*.tgz)       tar xvzf \$archive    ;;
				*.zip)       unzip \$archive       ;;
				*.Z)         uncompress \$archive  ;;
				*.7z)        7z x \$archive        ;;
				*)           echo "don't know how to extract '\$archive'..." ;;
			esac
		else
			echo "'\$archive' is not a valid file!"
		fi
	done
}

function used() {
    du -h "\$1"| tail -1
}
function usedm() {
    du --block-size=1M "\$1" | tail -1
}
function usedg() {
    du --block-size=1G "\$1" | tail -1
}
EOF
#
################################################################################
#
echo -e "clear\nneofetch" > /etc/profile.d/neofetch.sh
touch /root/.hushlogin
#
################################################################################
#
echo "Installing 'nginx'."
apt-get -y install nginx-core php-fpm php-xml &>/dev/null
#
################################################################################
#
echo "Creating 'setup-https' script."
#
# Remove old script
#
[ -f /usr/local/bin/setup-https-redirect ] && rm -f /usr/local/bin/setup-https-redirect
#
# Create new script
#
cat <<FEOF >/usr/local/bin/setup-https
#!/bin/bash
#
# Setup an HTTPS on 443.
#
DHPARAM_BITS=2048
[ ! -f /etc/default/dhparam ] && echo "DHPARAM_BITS=2048" > /etc/default/dhparam
. /etc/default/dhparam
#
# Check we have a dhparam file.
#
if [ ! -f /etc/ssl/dhparam.pem ] ; then
    echo "Generating \${DHPARAM_BITS} bit dhparam.pem file"
    openssl dhparam -out /etc/ssl/dhparam.pem \${DHPARAM_BITS}
fi
#
# Work out which cert/key files to use.
#
CERT_FILE=/etc/pve/local/pve-ssl.pem
CERT_KEY_FILE=/etc/pve/local/pve-ssl.key
if [ -f /etc/pve/local/pveproxy-ssl.pem ] ; then
    CERT_FILE=/etc/pve/local/pveproxy-ssl.pem
    CERT_KEY_FILE=/etc/pve/local/pveproxy-ssl.key
fi
#
# Generate nginx SSL configuration file.
#
mkdir -p /etc/nginx/ssl
cat <<EOF >/etc/nginx/ssl/pve.conf
# Global SSL configuration
#ssl on;
ssl_certificate \${CERT_FILE};
ssl_certificate_key \${CERT_KEY_FILE};
ssl_dhparam /etc/ssl/dhparam.pem;


# Security (Prevent POODLE & co.)
ssl_prefer_server_ciphers on;
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
add_header X-Frame-Options SAMEORIGIN;
add_header X-Content-Type-Options nosniff;

ssl_session_timeout 1d;
ssl_session_cache shared:SSL:50m;
ssl_session_tickets on;

ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.4.4 8.8.8.8 valid=300s;
resolver_timeout 10s;

gzip off;
EOF
#
# Reconfigure nginx
#
service nginx stop
systemctl disable nginx
cat <<EOF >/usr/lib/systemd/system/pvenginx.service
# Stop dance for nginx
# =======================
#
# ExecStop sends SIGQUIT (graceful stop) to the nginx process.
# If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control
# and sends SIGTERM (fast shutdown) to the main process.
# After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends
# SIGKILL to all the remaining processes in the process group (KillMode=mixed).
#
# nginx signals reference doc:
# http://nginx.org/en/docs/control.html
#
[Unit]
Description=A high performance web server and a reverse proxy server
Documentation=man:nginx(8)
After=network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=sleep 10
ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;'
ExecReload=/usr/sbin/nginx -g 'daemon on; master_process on;' -s reload
ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid
TimeoutStopSec=5
KillMode=mixed

[Install]
WantedBy=multi-user.target
EOF
systemctl enable pvenginx
service pvenginx start
service pvenginx restart
#
# Finished
#
exit 0
FEOF
chmod a+x /usr/local/bin/setup-https
echo "Setting up HTTPS, this will need to be re-run if you add ACME certificates to node."
echo "- See README.md at https://github.com/alandoyle/proxmox-setup/ for more information."
/usr/local/bin/setup-https &>/dev/null
#
################################################################################
#
echo "Installing PHPSYSINFO on port 443 (HTTPS)"
rm -f /etc/nginx/sites-available/phpsysinfo &>/dev/null 2>&1
cat <<EOF >/etc/nginx/sites-available/phpsysinfo
##
#
# nginx config for phpsysinfo
#
server {
    listen 443 ssl http2 default_server;
    include ssl/pve.conf;

    root /var/www/phpsysinfo;
    index index.php;
    server_name _;

    location / {
        try_files \$uri \$uri/ =404;
    }

    location /pve {
        return 302 https://\$host:8006;
    }

    location ~ \.php\$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php-fpm.sock;
    }
}
EOF
rm /etc/nginx/sites-enabled/* &>/dev/null 2>&1
ln -s /etc/nginx/sites-available/phpsysinfo /etc/nginx/sites-enabled/phpsysinfo &>/dev/null
if [ ! -d /var/www/phpsysinfo/.git ] ; then
    git pull &>/dev/null
fi
if [ ! -d /var/www/phpsysinfo ] ; then
    cd /var/www
    git clone https://github.com/phpsysinfo/phpsysinfo &>/dev/null
fi
cp /var/www/phpsysinfo/phpsysinfo.ini.new /var/www/phpsysinfo/phpsysinfo.ini &>/dev/null
#
# Update settings
#
sed -i 's\DEFAULT_DISPLAY_MODE="auto"\DEFAULT_DISPLAY_MODE="bootstrap"\' /var/www/phpsysinfo/phpsysinfo.ini
sed -i 's\SHOW_PICKLIST_LANG=true\SHOW_PICKLIST_LANG=false\' /var/www/phpsysinfo/phpsysinfo.ini
sed -i 's\SHOW_PICKLIST_TEMPLATE=true\SHOW_PICKLIST_TEMPLATE=false\' /var/www/phpsysinfo/phpsysinfo.ini
sed -i 's\SHOW_CPULIST_EXPANDED=true\SHOW_CPULIST_EXPANDED=false\' /var/www/phpsysinfo/phpsysinfo.ini
sed -i 's\SENSOR_PROGRAM=false\SENSOR_PROGRAM="HDDtemp,LMSensors"\' /var/www/phpsysinfo/phpsysinfo.ini
sed -i 's\HIDE_FS_TYPES=""\HIDE_FS_TYPES="tmpfs,devtmpfs,usbfs,bstfolder,udev,fuse"\' /var/www/phpsysinfo/phpsysinfo.ini
#
# Restart nginx
#
service pvenginx restart
#
################################################################################
#

#
################################################################################
#
read -r -p "Reboot Proxmox VE ${PVEVERSION} now? <y/N> " prompt
if [[ $prompt == "y" || $prompt == "Y" || $prompt == "yes" || $prompt == "Yes" ]]; then
    echo "Rebooting Proxmox VE ${PVEVERSION}"
    reboot
fi
#
################################################################################
